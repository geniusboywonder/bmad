Based on my analysis of the current implementation, here's the ordered sequence to manually test the existing
  workflow:

  Prerequisites

  - Backend running on http://localhost:8000
  - Database and Redis available
  - Environment variables configured (API keys, database URL)

  ---
  1. Health Check (Start Here)

  Purpose: Verify system is operational

  GET http://localhost:8000/health/detailed

  Expected Response:
  {
    "detail": {
      "status": "healthy",
      "service": "BotArmy Backend",
      "version": "1.0.0",
      "components": {
        "database": {"status": "healthy"},
        "redis": {"status": "healthy"},
        "celery": {"status": "healthy"},
        "llm_providers": {
          "openai": {"status": "healthy" | "not_configured"}
        }
      }
    }
  }

  ---
  2. Create Project

  Purpose: Initialize a new project

  POST http://localhost:8000/api/v1/projects/
  Content-Type: application/json

  {
    "name": "Test Product Development",
    "description": "Testing the BotArmy workflow with a simple product"
  }

  Expected Response:
  {
    "id": "550e8400-e29b-41d4-a716-446655440000",
    "name": "Test Product Development",
    "description": "Testing the BotArmy workflow with a simple product",
    "status": "active"
  }

  Save the project_id for subsequent calls! #3fa85f64-5717-4562-b3fc-2c963f66afa6

  ---
  3. Check Project Status

  Purpose: Verify project was created

  GET http://localhost:8000/api/v1/projects/{project_id}/status

  Expected Response:
  {
    "project_id": "550e8400-e29b-41d4-a716-446655440000",
    "tasks": []
  }

  ---
  4. Check Agent Statuses

  Purpose: Verify agents are in idle state

  GET http://localhost:8000/api/v1/agents/status

  Expected Response:
  {
    "orchestrator": {
      "agent_type": "orchestrator",
      "status": "idle",
      "current_task_id": null,
      "last_activity": "2024-01-15T10:00:00Z"
    },
    "analyst": {
      "agent_type": "analyst",
      "status": "idle",
      "current_task_id": null,
      "last_activity": "2024-01-15T10:00:00Z"
    }
    // ... other agents
  }

  ---
  5. Create Analyst Task (Requirements Gathering)

  Purpose: Start the workflow with requirements analysis

  POST http://localhost:8000/api/v1/projects/{project_id}/tasks
  Content-Type: application/json

  {
    "agent_type": "analyst",
    "instructions": "Analyze requirements for a simple task management mobile app. Create a comprehensive PRD including
  user personas, core features, and success criteria.",
    "context_ids": []
  }

  Expected Response:
  {
    "task_id": "660e8400-e29b-41d4-a716-446655440001",
    "celery_task_id": "celery-task-123",
    "status": "submitted"
  }

  Save the task_id for monitoring!

  ---
  6. Monitor Task Progress

  Purpose: Watch the task execution

  GET http://localhost:8000/api/v1/projects/{project_id}/status

  Poll this endpoint every 5-10 seconds. Expected progression:

  {
    "project_id": "550e8400-e29b-41d4-a716-446655440000",
    "tasks": [
      {
        "task_id": "660e8400-e29b-41d4-a716-446655440001",
        "agent_type": "analyst",
        "status": "working",  // Changes: pending -> working -> completed
        "created_at": "2024-01-15T10:05:00Z",
        "updated_at": "2024-01-15T10:06:00Z"
      }
    ]
  }

  ---
  7. Check for HITL Requests

  Purpose: Handle any human-in-the-loop requests

  GET http://localhost:8000/api/v1/hitl/project/{project_id}/requests

  If HITL requests exist, respond to them:

  POST http://localhost:8000/api/v1/hitl/{request_id}/respond
  Content-Type: application/json

  {
    "action": "approve",
    "comment": "Requirements look good, proceed with analysis"
  }

  Expected actions: approve, reject, or amend

  ---
  8. Check Project Artifacts

  Purpose: View generated context artifacts

  GET http://localhost:8000/api/v1/artifacts/{project_id}/summary

  Expected Response:
  {
    "project_id": "550e8400-e29b-41d4-a716-446655440000",
    "project_name": "Test Product Development",
    "artifact_count": 1,
    "generated_at": "2024-01-15T10:10:00Z",
    "download_available": true,
    "artifacts": [
      {
        "name": "Product Requirements Document",
        "file_type": "markdown",
        "created_at": "2024-01-15T10:10:00Z"
      }
    ]
  }

  ---
  9. Create Architect Task

  Purpose: Continue workflow with technical architecture

  POST http://localhost:8000/api/v1/projects/{project_id}/tasks
  Content-Type: application/json

  {
    "agent_type": "architect",
    "instructions": "Create technical architecture for the task management app based on the PRD. Include API
  specifications, database schema, and implementation plan.",
    "context_ids": []
  }

  Monitor progress same as step 6

  ---
  10. Create Developer Task

  Purpose: Generate implementation code

  POST http://localhost:8000/api/v1/projects/{project_id}/tasks
  Content-Type: application/json

  {
    "agent_type": "coder",
    "instructions": "Implement the task management app based on the architecture specification. Generate
  production-ready code with tests.",
    "context_ids": []
  }

  ---
  11. Project Completion Check

  Purpose: Verify project completion

  GET http://localhost:8000/api/v1/projects/{project_id}/completion

  Expected Response (when complete):
  {
    "project_id": "550e8400-e29b-41d4-a716-446655440000",
    "completion_status": "completed",
    "completed_tasks": 3,
    "total_tasks": 3,
    "completion_percentage": 100.0,
    "completion_timestamp": "2024-01-15T10:30:00Z"
  }

  ---
  12. Download Project Artifacts

  Purpose: Get deliverables

  GET http://localhost:8000/api/v1/artifacts/{project_id}/download

  Returns a ZIP file with all generated artifacts

  ---
  Expected Workflow Timeline

  1. Project Creation: Immediate
  2. Analyst Task: 2-5 minutes (depending on LLM)
  3. HITL Approval (if triggered): Manual action required
  4. Architect Task: 3-7 minutes
  5. Developer Task: 5-10 minutes
  6. Total Time: 10-25 minutes for complete workflow

  ---
  Troubleshooting Common Issues

  Tasks Stuck in "pending"

  - Check Celery workers are running
  - Verify Redis connectivity
  - Check backend logs for errors

  HITL Requests Not Appearing

  - Check database for pending HITL requests
  - Verify HITL trigger conditions
  - Check task confidence scores

  Agent Status Shows "error"

  - Check LLM provider API keys
  - Verify API quotas/rate limits
  - Check agent logs for specific errors

  No Context Artifacts Generated

  - Verify task completed successfully
  - Check artifact service logs
  - Ensure database has context_artifacts table

  ---
  WebSocket Testing (Optional)

  If you want real-time updates, connect to WebSocket:

  const ws = new WebSocket('ws://localhost:8000/ws/{project_id}');

  ws.onmessage = (event) => {
    const data = JSON.parse(event.data);
    console.log('Real-time update:', data);
  };

‚è∫ This comprehensive testing guide walks you through the complete happy path workflow for the current BotArmy
  implementation. The sequence covers:

  - System health verification
  - Project lifecycle management
  - Multi-agent task orchestration
  - Human-in-the-loop interactions
  - Artifact generation and download

  Each step includes the exact API endpoint, request format, and expected responses. The workflow typically takes 10-25
  minutes to complete end-to-end, depending on LLM response times and any HITL interactions required.

  Key Points:
  - Start with health checks to ensure all components are operational
  - Save project_id and task_id values for subsequent API calls
  - Monitor task progress by polling project status
  - Handle HITL requests promptly to avoid workflow blocking
  - The final deliverable is a downloadable ZIP with all generated artifacts

  This gives you a complete manual testing framework to validate the current implementation and identify any gaps before
   proceeding with Phase 1 & 2 enhancements.
