# ===== BMAD ENTERPRISE PRODUCTION DOCKER COMPOSE =====
# Production-ready orchestration for BMAD v5.0
version: '3.8'

# Define custom networks for security and performance
networks:
  bmad_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

  monitoring_network:
    driver: bridge

# Define volumes for persistence and backups
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  logs_data:
    driver: local
  backups_data:
    driver: local

services:
  # ===== DATABASE SERVICES =====

  # PostgreSQL Database with production optimizations
  postgres:
    image: postgres:15-alpine
    container_name: bmad-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: bmad_prod_db
      POSTGRES_USER: bmad_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-bmad_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - backups_data:/backups
    networks:
      - bmad_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bmad_user -d bmad_prod_db"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Redis Cluster for caching and message queuing
  redis:
    image: redis:7-alpine
    container_name: bmad-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis.conf:/etc/redis/redis.conf:ro
    networks:
      - bmad_network
      - monitoring_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'

  # ===== APPLICATION SERVICES =====

  # BMAD Backend API with production optimizations
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: bmad-backend
    restart: unless-stopped
    environment:
      - APP_ENVIRONMENT=production
      - DATABASE_URL=postgresql+psycopg://bmad_user:${POSTGRES_PASSWORD:-bmad_password}@postgres:5432/bmad_prod_db?sslmode=disable&pool_pre_ping=true&pool_recycle=300
      - REDIS_URL=redis://redis:6379/0
      - REDIS_CELERY_URL=redis://redis:6379/1
      - REDIS_CACHE_URL=redis://redis:6379/2
      - REDIS_SESSION_URL=redis://redis:6379/3
      - DEBUG=false
      - LOG_LEVEL=INFO
      - METRICS_ENABLED=true
      - STRUCTLOG_ENABLED=true
      - CACHE_ENABLED=true
      - HEALTH_CHECK_ENABLED=true
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - bmad_network
      - monitoring_network
    volumes:
      - logs_data:/var/log/bmad
      - ./uploads:/var/bmad/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  # ===== BACKGROUND PROCESSING =====

  # Celery Worker Pool with auto-scaling
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: bmad-celery-worker
    restart: unless-stopped
    environment:
      - APP_ENVIRONMENT=production
      - DATABASE_URL=postgresql+psycopg://bmad_user:${POSTGRES_PASSWORD:-bmad_password}@postgres:5432/bmad_prod_db?sslmode=disable&pool_pre_ping=true&pool_recycle=300
      - REDIS_URL=redis://redis:6379/0
      - REDIS_CELERY_URL=redis://redis:6379/1
      - CELERY_WORKER_CONCURRENCY=4
      - CELERY_WORKER_MAX_TASKS_PER_CHILD=1000
      - CELERY_WORKER_TIME_LIMIT=3600
      - DEBUG=false
      - LOG_LEVEL=INFO
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - bmad_network
      - monitoring_network
    volumes:
      - logs_data:/var/log/bmad
    command: celery -A app.tasks.celery_app worker --loglevel=info --pool=prefork --concurrency=4
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Celery Beat for scheduled tasks
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: bmad-celery-beat
    restart: unless-stopped
    environment:
      - APP_ENVIRONMENT=production
      - DATABASE_URL=postgresql+psycopg://bmad_user:${POSTGRES_PASSWORD:-bmad_password}@postgres:5432/bmad_prod_db?sslmode=disable&pool_pre_ping=true&pool_recycle=300
      - REDIS_CELERY_URL=redis://redis:6379/1
      - DEBUG=false
      - LOG_LEVEL=INFO
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - bmad_network
    volumes:
      - logs_data:/var/log/bmad
    command: celery -A app.tasks.celery_app beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # ===== MONITORING & OBSERVABILITY =====

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: bmad-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - monitoring_network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: bmad-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - monitoring_network
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # ===== LOGGING & BACKUP =====

  # Log aggregation with ELK stack (Elasticsearch, Logstash, Kibana)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: bmad-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
      - xpack.monitoring.enabled=false
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - ./monitoring/elasticsearch/data:/usr/share/elasticsearch/data
    networks:
      - monitoring_network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: bmad-kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - monitoring_network
    depends_on:
      - elasticsearch
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'

  # ===== UTILITY SERVICES =====

  # Nginx reverse proxy and load balancer
  nginx:
    image: nginx:alpine
    container_name: bmad-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - logs_data:/var/log/nginx
    networks:
      - bmad_network
    depends_on:
      - backend
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'
        reservations:
          memory: 64M
          cpus: '0.1'

  # Automated backup service
  backup:
    image: postgres:15-alpine
    container_name: bmad-backup
    restart: "no"  # Run on schedule, not continuously
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-bmad_password}
    volumes:
      - backups_data:/backups
    networks:
      - bmad_network
    command: >
      sh -c "
        pg_dump -h postgres -U bmad_user -d bmad_prod_db > /backups/bmad_backup_$(date +%Y%m%d_%H%M%S).sql &&
        find /backups -name '*.sql' -mtime +30 -delete
      "
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # ===== DEVELOPMENT SERVICES =====

  # PgAdmin for database management (development only)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: bmad-pgadmin
    restart: unless-stopped
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@bmad.local
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD:-admin}
      - PGADMIN_CONFIG_SERVER_MODE=False
    ports:
      - "5050:80"
    networks:
      - bmad_network
    depends_on:
      - postgres
    profiles:
      - dev
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Redis Commander for Redis management (development only)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: bmad-redis-commander
    restart: unless-stopped
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"
    networks:
      - bmad_network
    depends_on:
      - redis
    profiles:
      - dev
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'
        reservations:
          memory: 64M
          cpus: '0.05'
